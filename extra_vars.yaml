## 1.inventory\release\group_vars\all\all.yml
## Valid bootstrap options (required): ubuntu, coreos, centos, none
## If the OS is not listed here, it means it doesn't require extra/bootstrap steps.
## In example, python is not available on 'coreos' so it must be installed before
## anything else. In the opposite, Debian has already all its dependencies fullfiled, then bootstrap_os should be set to `none`.
bootstrap_os: centos
## Local loadbalancer should use this port instead, if defined.
## Defaults to kube_apiserver_port (6443)
#nginx_kube_apiserver_port: 8443

## Set true to download and cache container
#download_container: true

## 2.inventory\release\group_vars\all\docker.yml
## Add other registry,example China registry mirror.
docker_registry_mirrors:
   - https://registry.docker-cn.com
   - https://registry.aliyuncs.com

## 3.inventory\cluster\group_vars\k8s-cluster\addons.yml
# Helm deployment
helm_enabled: true
# Nginx ingress controller deployment
ingress_nginx_enabled: true
ingress_nginx_namespace: "kube-system"

## 4.inventory\release\group_vars\k8s-cluster\k8s-cluster.yml
# Choose network plugin (cilium, calico, contiv, weave or flannel)
# Can also be set to 'cloud', which lets the cloud provider setup appropriate routing
kube_network_plugin: flannel
# Kubernetes internal network for services, unused block of space.
kube_service_addresses: 10.233.0.0/18
# internal network. When used, it will assign IP
# addresses from this range to individual pods.
# This network must be unused in your network infrastructure!
kube_pods_subnet: 10.233.64.0/18
# Kube-proxy proxyMode configuration.
# Can be ipvs, iptables
kube_proxy_mode: ipvs
# Can be dnsmasq_kubedns, kubedns, coredns, coredns_dual, manual or none
dns_mode: coredns

## 5.roles\kubespray-defaults\defaults\main.yaml
# Users to create for basic auth in Kubernetes API via HTTP
kube_api_pwd: "xforcecloud12345"
kube_users:
  kube:
    pass: "{{kube_api_pwd}}"
    role: admin
